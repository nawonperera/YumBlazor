@page "/category"
@inject ICategoryRepository _categoryRepository

@if(IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/Images/loading.gif" alt="loading"/>
    </div>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-black bg-gradient ml-0 py-3">
            <div class="col-12 text-center">
                <h2 class="text-white py-2">Category List</h2>
            </div>
        </div>
        <div class="card-body p-4">
            <div class="row pb-3">
                <div class="col-12 text-end">
                    <button class="btn btn-lg btn-secondary" style="width:250px">Add New Category</button>
                </div>
                @if (Categories.Any())
                {
                    <table class="table table-bordered table-striped">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach(var obj in Categories)
                            {
                                <tr>
                                    <td>
                                        @obj.Name
                                    </td>
                                    <td>
                                        Buttons
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    </div>
}

@code {
    private bool IsProcessing { get; set; } = false;

    /*
     * IEnumerable<Category>
     * IEnumerable<T> = a collection (list, array, etc.) that you can loop through.
     * Category = the type of items inside.
     * So IEnumerable<Category> means: “a collection of Category objects that can be looped through (but not modified directly).”
     * 
     * = new List<Category>();
     * This gives it a default value when the class is created.
     * new List<Category>() → creates an empty list of categories.
     * So Categories will start empty but ready to store Category objects.
     */
    private IEnumerable<Category> Categories { get; set; } = new List<Category>();

    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;
        await Task.Delay(2000);
        LoadCategories();
        IsProcessing = false;
    }

    private void LoadCategories()
    {
        Categories = _categoryRepository.GetAll();
    }
}
